"""
Defines the shared state object for the LangGraph agent pipeline.
"""
from typing import List, Dict, Any, TypedDict, Optional, Set

# Import VectorStore for type hinting the session store
from langchain_core.vectorstores import VectorStore

class AgentState(TypedDict):
    """Represents the state of our agent graph."""
    original_question: str
    clarified_question: str
    plan_outline: str # Markdown outline generated by clarifier/planner stage

    # Intermediate results (may be replaced/modified by new flow)
    search_results: List[Dict[str, Any]] # Raw results from search
    rag_context: str # Context retrieved from RAG
    rag_source_paths: List[str] # Source paths from RAG

    # New fields for deep research loop
    session_vector_store: Optional[VectorStore] # Ephemeral store for fetched/chunked content
    fetched_docs: List[Dict[str, Any]] # Store results from fetch_url tool {url, title, html}
    notes: List[str] # List of source-grounded notes generated during reasoning
    seen_queries: Set[str] # Track queries made by the reasoner to avoid loops

    # Final outputs
    combined_context: str # Context passed to synthesizer (might become curated_notes)
    final_answer: str
    web_source_urls: List[str] # URLs from search/fetch (needs careful tracking)

    # Control/Meta fields
    verbosity_level: int
    error: Optional[str] # To capture errors within the graph flow
# Fields updated by the reasoner/loop control
    current_iteration: int
    next_action: Optional[str]
    current_query: Optional[str]
    url_to_fetch: Optional[str]
    retrieved_chunks: List[Dict[str, Any]] # Chunks retrieved by retrieve node
    query_for_retrieval: Optional[str] # Query used for search that led to a fetch, preserved for retrieval
    seen_urls: Set[str] # Track URLs that have already been fetched